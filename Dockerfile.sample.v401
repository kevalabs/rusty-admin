# PCI DSS v4.0.1 Compliant Dockerfile Example
# This Dockerfile demonstrates best practices outlined in the PCI DSS v4.0.1 Compliant Dockerfile Policy.

# === Build Stage ===
# Use a specific, minimal base image for the build environment (PCI DSS v4.0.1 Req 2.2.1, 6.3.1, 6.3.2)
# Pinning to a specific digest (sha256) is preferred for immutability and ensures known-good components.
# Use minimal images to reduce attack surface (PCI DSS v4.0.1 Req 2.2.4).
ARG BUILDER_IMAGE=golang:1.19-alpine@sha256:...
FROM ${BUILDER_IMAGE} AS builder

# Set working directory
WORKDIR /app

# Add metadata labels (Supports PCI DSS v4.0.1 Req 2.2.1, 12.5.1 - Inventory)
LABEL maintainer="Your Name <your.email@example.com>"
LABEL stage="builder"
LABEL build-date="$(date -u +%Y-%m-%dT%H:%M:%SZ)"

# Install build dependencies, update packages, and clean up in the same layer (PCI DSS v4.0.1 Req 2.2.1, 2.2.4, 6.3.1, 6.3.2)
# Minimizes image size and attack surface. Ensures vulnerabilities are patched.
RUN apk update && apk upgrade --no-cache && \
    apk add --no-cache git build-base && \
    rm -rf /var/cache/apk/*

# Copy application source code
COPY . .

# Build the application
# Ensure build tools are only in the build stage, not the final image (PCI DSS v4.0.1 Req 2.2.1)
# Secure coding practices should be followed (PCI DSS v4.0.1 Req 6.2.1, 6.2.4)
RUN go build -ldflags="-s -w" -o /app/myapp .

# === Runtime Stage ===
# Use a minimal, verified base image for runtime (PCI DSS v4.0.1 Req 2.2.1, 6.3.1, 6.3.2)
# Distroless or minimal Alpine are good choices. Reduces attack surface (PCI DSS v4.0.1 Req 2.2.4).
# Base image should be scanned for vulnerabilities (PCI DSS v4.0.1 Req 11.3).
ARG RUNTIME_IMAGE=gcr.io/distroless/static-debian11@sha256:...
FROM ${RUNTIME_IMAGE} AS runtime

# Set working directory
WORKDIR /app

# Add metadata labels including version and description (Supports PCI DSS v4.0.1 Req 2.2.1, 12.5.1 - Inventory)
LABEL maintainer="Your Name <your.email@example.com>"
LABEL version="1.0.0"
LABEL description="Sample PCI Compliant Application Runtime"

# Create a non-root user and group (PCI DSS v4.0.1 Req 7.2.1, 7.2.2)
# Running as non-root minimizes potential damage if the container is compromised (Least Privilege).
# Note: Distroless images run as non-root by default, but explicitly defining is good practice if using other bases.
# RUN addgroup -S appgroup && adduser -S appuser -G appgroup
ARG APP_USER=nonroot
ARG APP_GROUP=nonroot
# USER ${APP_USER}:${APP_GROUP} # Distroless runs as nonroot:nonroot by default (UID/GID 65532)

# Copy the compiled application binary from the builder stage
# Ensure correct ownership for the non-root user (PCI DSS v4.0.1 Req 7.2.1, 7.2.2)
COPY --from=builder /app/myapp /app/myapp
# COPY --chown=${APP_USER}:${APP_GROUP} --from=builder /app/myapp /app/myapp # Use if not using distroless or need specific UID/GID

# Copy necessary configuration files or assets
# Ensure correct ownership
# COPY --chown=${APP_USER}:${APP_GROUP} config.yaml /app/config.yaml

# Expose only necessary ports (PCI DSS v4.0.1 Req 1.3, 1.4, 2.2.4)
# Avoid exposing sensitive or management ports. Network segmentation should be applied externally.
EXPOSE 8080

# Define a health check (Supports PCI DSS v4.0.1 Req 11.5 - System Monitoring)
# Allows orchestrator to verify application health. Can support Req 5.3.2 (ensuring mechanisms are active).
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD ["/app/myapp", "healthcheck"] # Replace with actual health check command/endpoint

# Secrets Management Placeholder (PCI DSS v4.0.1 Req 3.6, 8.2.1, 8.3.6)
# DO NOT hardcode secrets. Use environment variables, mounted secrets (Kubernetes/Docker Secrets), or a secrets manager.
# Ensure secrets use strong cryptography and access is controlled (Least Privilege - Req 7.2.1, 7.2.2).
# Example: Read DB password from an environment variable set at runtime.
# ENV DB_PASSWORD=placeholder_value_from_secret_manager

# Set the entrypoint or command to run the application as the non-root user
# USER ${APP_USER}:${APP_GROUP} # Switch user if not done globally or if base image requires it
ENTRYPOINT ["/app/myapp"]

# Note: Ensure application logging meets PCI DSS v4.0.1 Req 10.2.1, 10.3.1, 10.3.2 (send to stdout/stderr).
# Note: Integrate vulnerability scanning (Req 6.3.1, 11.3) and Dockerfile linting into CI/CD pipeline.

